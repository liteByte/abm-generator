package generatorModel

import (
	"github.com/francoFerraguti/go-abm-generator/common"
	"github.com/francoFerraguti/go-abm-generator/structs"
	"github.com/francoFerraguti/go-abm-generator/templates"
	"github.com/liteByte/frango"
	"strings"
)

func Get(projectPath string, needAuthentication bool, model structs.ModelStruct) string {
	template := templates.ModelGo()

	authenticationUsername, authenticationPassword := getAuthData(model)
	checkLoginString, authImportString := getAuthStrings(needAuthentication, authenticationUsername.Name, authenticationPassword.Name, model.Name)
	createString, getListString, getString, updateString, deleteString := getModelFunctions(model)

	imports := common.GetImports(authImportString, projectPath+"/dbhandler", projectPath+"/structs")
	packageName := "package " + frango.FirstLetterToLower(model.Name)

	fileContent := strings.Replace(template, "&&PACKAGE_NAME&&", packageName, -1)
	fileContent = strings.Replace(fileContent, "&&IMPORTS&&", imports, -1)
	fileContent = strings.Replace(fileContent, "&&CHECK_LOGIN&&", checkLoginString, -1)
	fileContent = strings.Replace(fileContent, "&&CREATE&&", createString, -1)
	fileContent = strings.Replace(fileContent, "&&GET_LIST&&", getListString, -1)
	fileContent = strings.Replace(fileContent, "&&UPDATE&&", updateString, -1)
	fileContent = strings.Replace(fileContent, "&&GET&&", getString, -1)
	fileContent = strings.Replace(fileContent, "&&DELETE&&", deleteString, -1)

	return fileContent
}

func getModelFunctions(model structs.ModelStruct) (string, string, string, string, string) {
	getByString := ""
	deleteByString := ""
	updateByString := ""

	for _, field := range model.Fields {
		if !field.Unique {
			continue
		}

		updateByString += modelUpdateBy(model, field)
		getByString += modelGetBy(model, field)
		deleteByString += modelDeleteBy(model, field)
	}

	return modelCreate(model), modelGetList(model), getByString, updateByString, deleteByString
}

func getAuthData(model structs.ModelStruct) (structs.FieldStruct, structs.FieldStruct) {
	authenticationUsername := structs.FieldStruct{}
	authenticationPassword := structs.FieldStruct{}

	for _, field := range model.Fields {
		if field.AuthenticationUsername {
			authenticationUsername = field
		}
		if field.AuthenticationPassword {
			authenticationPassword = field
		}
	}

	return authenticationUsername, authenticationPassword
}

func getAuthStrings(needAuthentication bool, authUsername, authPassword, modelName string) (string, string) {
	checkLoginString := ""
	authImportString := ""

	if needAuthentication && authUsername != "" && authPassword != "" {
		checkLoginString += "func CheckLogin(loginStruct structs.LoginStruct) error {\n"
		checkLoginString += "	var exists bool\n\n"
		checkLoginString += "	err := dbhandler.GetDatabase().QueryRow(`SELECT EXISTS (SELECT 1 FROM " + frango.FirstLetterToUpper(modelName) + " WHERE " + authUsername + " = ? AND " + authPassword + " = ? LIMIT 1)`, loginStruct." + frango.FirstLetterToUpper(authUsername) + ", loginStruct." + frango.FirstLetterToUpper(authPassword) + ").Scan(&exists)\n"
		checkLoginString += "	if err != nil {\n"
		checkLoginString += "		return err\n"
		checkLoginString += "	}\n\n"
		checkLoginString += "	if !exists {\n"
		checkLoginString += "		return errors.New(`Login failed`)\n"
		checkLoginString += "	}\n\n"
		checkLoginString += "	return nil\n"
		checkLoginString += "}\n\n"

		authImportString = `errors`
	}

	return checkLoginString, authImportString
}

//--------------------------

func modelCreate(model structs.ModelStruct) string {
	createString := ""
	fieldsList := ""
	questionMarksList := ""
	fieldsStructList := ""

	for _, field := range model.Fields {
		if field.AutoGenerated {
			continue
		}

		fieldsList += frango.FirstLetterToLower(field.Name) + ", "
		questionMarksList += "?, "
		fieldsStructList += frango.FirstLetterToLower(model.Name) + "." + frango.FirstLetterToUpper(field.Name) + ", "
	}
	fieldsList = frango.RemoveLastCharacters(fieldsList, 2)
	questionMarksList = frango.RemoveLastCharacters(questionMarksList, 2)
	fieldsStructList = frango.RemoveLastCharacters(fieldsStructList, 2)

	createString += "func Create(" + frango.FirstLetterToLower(model.Name) + " structs." + model.Name + "Struct" + ") error {\n"
	createString += "	_, err := dbhandler.GetDatabase().Exec(`INSERT INTO " + model.Name + " (" + fieldsList + ") VALUES(" + questionMarksList + ")`, " + fieldsStructList + ")\n"
	createString += "	return err\n"
	createString += "}\n\n"

	return createString
}

func modelGetList(model structs.ModelStruct) string {
	getListString := ""

	fieldsList := ""
	fieldsListAmpersand := ""
	fieldsListStructs := ""

	for _, field := range model.Fields {
		fieldsList += frango.FirstLetterToLower(field.Name) + ", "
		fieldsListStructs += frango.FirstLetterToUpper(field.Name) + ": " + frango.FirstLetterToLower(model.Name) + "." + frango.FirstLetterToUpper(field.Name) + ", "
		fieldsListAmpersand += "&" + frango.FirstLetterToLower(model.Name) + "." + frango.FirstLetterToUpper(field.Name) + ", "
	}
	fieldsList = frango.RemoveLastCharacters(fieldsList, 2)
	fieldsListStructs = frango.RemoveLastCharacters(fieldsListStructs, 2)
	fieldsListAmpersand = frango.RemoveLastCharacters(fieldsListAmpersand, 2)

	//-----

	getListString += "func GetList() ([]structs." + model.Name + "Struct, error) {\n"
	getListString += "	var " + frango.FirstLetterToLower(model.Name) + " structs." + model.Name + "Struct\n"
	getListString += "	" + frango.FirstLetterToLower(model.Name) + "List := make([]structs." + model.Name + "Struct, 0)\n\n"
	getListString += "    rows, err := dbhandler.GetDatabase().Query(`SELECT " + fieldsList + " FROM " + model.Name + "`)\n"
	getListString += "    defer rows.Close()\n\n"
	getListString += "	if err != nil {\n"
	getListString += "		return []structs." + model.Name + "Struct{}, err\n"
	getListString += "	}\n\n"
	getListString += "    for rows.Next() {\n"
	getListString += "        err = rows.Scan(" + fieldsListAmpersand + ")\n"
	getListString += "	    if err != nil {\n"
	getListString += "		    return []structs." + model.Name + "Struct{}, err\n"
	getListString += "	    }\n\n"
	getListString += "        " + frango.FirstLetterToLower(model.Name) + "List = append(" + frango.FirstLetterToLower(model.Name) + "List, structs." + model.Name + "Struct{" + fieldsListStructs + "})\n"
	getListString += "	}\n\n"
	getListString += "    return " + frango.FirstLetterToLower(model.Name) + "List, nil\n"
	getListString += "}\n\n"

	return getListString
}

func modelUpdateBy(model structs.ModelStruct, field structs.FieldStruct) string {
	updateString := ""
	fieldsList := ""
	parametersList := ""

	for _, secondaryField := range model.Fields {
		if field == secondaryField || secondaryField.AutoGenerated {
			continue
		}

		fieldsList += frango.FirstLetterToLower(secondaryField.Name) + " = ?, "
		parametersList += frango.FirstLetterToLower(model.Name) + "." + frango.FirstLetterToUpper(secondaryField.Name) + ", "
	}
	parametersList += frango.FirstLetterToLower(model.Name) + "." + frango.FirstLetterToUpper(field.Name)

	if fieldsList != "" {
		fieldsList = frango.RemoveLastCharacters(fieldsList, 2)
	}

	updateString += "func UpdateBy" + frango.FirstLetterToUpper(field.Name) + "(" + frango.FirstLetterToLower(model.Name) + " structs." + model.Name + "Struct" + ") error {\n"
	updateString += "	_, err := dbhandler.GetDatabase().Exec(`UPDATE " + model.Name + " SET " + fieldsList + " WHERE " + frango.FirstLetterToLower(field.Name) + " = ?" + "`, " + parametersList + ")\n"
	updateString += "	return err\n"
	updateString += "}\n\n"

	return updateString
}

func modelGetBy(model structs.ModelStruct, field structs.FieldStruct) string {
	getByString := ""
	fieldsList := ""
	fieldsListAmpersand := ""

	getByString += "func GetBy" + frango.FirstLetterToUpper(field.Name) + "(" + frango.FirstLetterToLower(field.Name) + " " + field.Type + ") (structs." + model.Name + "Struct, error) {\n"
	getByString += "	var " + frango.FirstLetterToLower(model.Name) + " structs." + model.Name + "Struct\n"
	getByString += "	" + frango.FirstLetterToLower(model.Name) + "." + frango.FirstLetterToUpper(field.Name) + " = " + frango.FirstLetterToLower(field.Name) + "\n\n"
	for _, secondaryField := range model.Fields {
		if field == secondaryField {
			continue
		}
		fieldsList += frango.FirstLetterToLower(secondaryField.Name) + ", "
		fieldsListAmpersand += "&" + frango.FirstLetterToLower(model.Name) + "." + frango.FirstLetterToUpper(secondaryField.Name) + ", "
	}
	fieldsList = frango.RemoveLastCharacters(fieldsList, 2)
	fieldsListAmpersand = frango.RemoveLastCharacters(fieldsListAmpersand, 2)

	getByString += "	err := dbhandler.GetDatabase().QueryRow(`SELECT " + fieldsList + " FROM " + model.Name + " WHERE " + frango.FirstLetterToLower(field.Name) + " = ?`, " + frango.FirstLetterToLower(field.Name) + ").Scan(" + fieldsListAmpersand + ")\n"
	getByString += "	if err != nil {\n"
	getByString += "		return structs." + model.Name + "Struct{}, err\n"
	getByString += "	}\n\n"
	getByString += "	return " + frango.FirstLetterToLower(model.Name) + ", nil\n"
	getByString += "}\n\n"

	return getByString
}

func modelDeleteBy(model structs.ModelStruct, field structs.FieldStruct) string {
	deleteByString := ""

	deleteByString += "func DeleteBy" + frango.FirstLetterToUpper(field.Name) + "(" + frango.FirstLetterToLower(field.Name) + " " + field.Type + ") error {\n"
	deleteByString += "    _, err := dbhandler.GetDatabase().Query(`DELETE FROM " + model.Name + " WHERE " + frango.FirstLetterToLower(field.Name) + " = ?`, " + frango.FirstLetterToLower(field.Name) + ")\n"
	deleteByString += "    return err\n"
	deleteByString += "}\n\n"

	return deleteByString
}
