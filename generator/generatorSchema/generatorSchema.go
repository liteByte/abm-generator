package generatorSchema

import (
	"github.com/francoFerraguti/go-abm-generator/structs"
	"github.com/francoFerraguti/go-abm-generator/templates"
	"strconv"
	"strings"
)

func Get(models []structs.ModelStruct) string {
	template := templates.SchemaGo()

	schema := getSchema(models)

	fileContent := strings.Replace(template, "&&SCHEMA&&", schema, -1)

	return fileContent
}

func getSchema(models []structs.ModelStruct) string {
	schemaString := ""

	for _, model := range models {
		schemaString += "func create" + model.Name + "Table() {\n"
		schemaString += "	query := `CREATE TABLE IF NOT EXISTS " + model.Name + " (\n"

		for i, field := range model.Fields {
			fieldString := field.Name

			max := "255"
			if field.Max != 0 {
				max = strconv.Itoa(field.Max)
			}

			if field.Type == "string" {
				fieldString += " varchar(" + max + ")"
			} else if field.Type == "bool" {
				fieldString += " tinyint"
			} else {
				fieldString += " " + field.Type
			}

			if field.Unique {
				fieldString += " UNIQUE"
			}

			if field.Required {
				fieldString += " NOT NULL"
			}

			if field.Default != "" {
				if field.Type == "bool" {
					if field.Default == "true" {
						fieldString += " DEFAULT '1'"
					} else if field.Default == "false" {
						fieldString += " DEFAULT '0'"
					}
				} else {
					fieldString += " DEFAULT '" + field.Default + "'"
				}
			}

			if field.AutoGenerated && field.Type == "int" {
				fieldString += " AUTO_INCREMENT"
			}

			if i != len(model.Fields)-1 {
				fieldString += ","
			}

			fieldString += "\n"
			schemaString += "		" + fieldString
		}
		schemaString += "	);`\n"
		schemaString += "	_, err := db.Exec(query)\n"
		schemaString += "	frango.PrintErr(err)\n"
		schemaString += "}\n\n"
	}

	return schemaString
}
